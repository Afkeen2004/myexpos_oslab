alias pid R2;
alias funcnum R1;
if(funcnum==1) then
	alias counter R1;
	counter=0;
	while(counter<16 && [PROCESS_TABLE+counter*16+4]!=TERMINATED) do
		counter=counter+1;
	endwhile;
	if(counter==16) then
		R0=-1;
		return;
	endif;
	[PROCESS_TABLE+counter*16+14]=PAGE_TABLE_BASE+counter*20;
	[PROCESS_TABLE+counter*16+15]=10;
	[PROCESS_TABLE+counter*16+4]=ALLOCATED;
	[PROCESS_TABLE+counter*16+1]=counter;
	R0=counter;
	return;
endif;
if(funcnum==2) then
	alias userareapage R3;
	userareapage=[PROCESS_TABLE+pid*16+11];
	multipush(R0,R1,R2,R3);
	funcnum=2;
	pid=userareapage;
	call MEMORY_MANAGER;
	multipop(R0,R1,R2,R3);
	return;
endif;
if(funcnum==3) then
	multipush(R0,R1,R2,R3);
	funcnum=4;
	call PROCESS_MANAGER;
	multipop(R0,R1,R2,R3);
	multipush(R0,R1,R2,R3);
	funcnum=2;
	call PROCESS_MANAGER;
	multipop(R0,R1,R2,R3);
	
	if([PROCESS_TABLE+pid*16+9]!=9) then
		alias counter R2;
		counter=0;
		while(counter<16) do
			if([PROCESS_TABLE+counter*16+4]==WAIT_PROCESS && [PROCESS_TABLE+counter*16+5]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+counter*16+4]=READY;
			endif;
			if([PROCESS_TABLE+counter*16+2]==pid) then
				[PROCESS_TABLE+counter*16+2]=-1;
			endif;
			counter=counter+1;
		endwhile;
	endif;
	[PROCESS_TABLE+pid*16+4]=TERMINATED;
	return;
endif;
if(funcnum==4) then
	alias counter R4;
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";
	counter=4;
	while(counter<20) do
		if([PTBR+counter+1]=="0100" || [PTBR+counter+1]=="0110") then
			multipush(R0,R1,R2,R3,R4);
			funcnum=2;
			pid=[PTBR+counter];
			call MEMORY_MANAGER;
			multipop(R0,R1,R2,R3,R4);
			[PTBR+counter]=-1;
			[PTBR+counter+1]="0000";
		endif;
		counter=counter+2;
	endwhile;
	counter=2;
	while(counter<10) do
		if(counter==4) then
			counter=8;
		else
			if([DISK_MAP_TABLE+pid*10+counter]!=-1) then
				multipush(R0,R1,R2,R3,R4);
				funcnum=4;
				R2=[DISK_MAP_TABLE+pid*10+counter];
				call MEMORY_MANAGER;
				multipop(R0,R1,R2,R3,R4);
				[DISK_MAP_TABLE+pid*10+counter]=-1;
			endif;
		counter=counter+1;
		endif;
	endwhile;
	return;
endif;
return;
