alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=userSP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=-1;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
backup;
multipush(EIP);
if((EC>0) || userSP==(PTLR*512)-1) then
	if(userSP==(PTLR*512)-1) then
		print "Stack overflow";
	endif;
	if(EC==1) then
		print "Illegal instruction";
	endif;
	if(EC==2) then
		print "Illegal memory access";
	endif;
	if(EC==3) then
		print "Arithmetic Exception";
	endif;
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	call PROCESS_MANAGER;
	call SCHEDULER;
else
	if(EPN==2 || EPN==3) then
		multipush(R0,R1);
		R1=1;
		call MEMORY_MANAGER;
		R11=R0;
		multipop(R0,R1);
		[PTBR+4]=R11;
		[PTBR+5]="1110";
		multipush(R0,R1);
		R1=1;
		call MEMORY_MANAGER;
		R11=R0;
		multipop(R0,R1);
		[PTBR+6]=R11;
		[PTBR+7]="1110";
	else    
		
		multipush(R0,R1,EPN);
		R1=5;
		R2=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		call MEMORY_MANAGER;
		R11=R0;
		multipop(R0,R1,EPN);
		[PTBR+2*EPN]=R11;
		[PTBR+2*EPN+1]="1100";
		
	endif;
endif;
multipop(EIP);
restore;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+12]=SP;
SP=userSP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=SP+1;
[[PTBR+2*(SP/512)]*512+(SP%512)]=EIP;
ireturn;
