alias userSP R0;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=userSP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=8;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
multipush(R0);
R1=1;
call PROCESS_MANAGER;
R11=R0;
multipop(R0);
if(R11==-1) then
	[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=-1;
	SP=userSP;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;
alias newpid R11;
if([PTBR+4]==-1) then
	multipush(R0,R11);
	R1=1;
	call MEMORY_MANAGER;
	R10=R0;
	multipop(R0,R11);
	[PTBR+4]=R10;
	[PTBR+5]="1110";
	multipush(R0,R11);
	R1=1;
	call MEMORY_MANAGER;
	R10=R0;
	multipop(R0,R11);
	[PTBR+6]=R10;
	[PTBR+7]="1110";
endif;
alias counter R1;
counter=16;
while(counter<20) do
	multipush(R0,R1,R11);
	R1=1;
	call MEMORY_MANAGER;
	R10=R0;
	multipop(R0,R1,R11);
	[PAGE_TABLE_BASE+newpid*20+counter]=R10;
	[PAGE_TABLE_BASE+newpid*20+counter+1]="0110";
	counter=counter+2;
endwhile;
multipush(R0,R1,R11);
R1=1;
call MEMORY_MANAGER;
R10=R0;
multipop(R0,R1,R11);
[PROCESS_TABLE+newpid*16+11]=R10;
[PROCESS_TABLE+newpid*16]=0;
[PROCESS_TABLE+newpid*16+2]=[SYSTEM_STATUS_TABLE+1];
[PROCESS_TABLE+newpid*16+3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];
[PROCESS_TABLE+newpid*16+4]=CREATED;
[PROCESS_TABLE+newpid*16+6]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+6];
[PROCESS_TABLE+newpid*16+7]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7];
[PROCESS_TABLE+newpid*16+9]=0;
[PROCESS_TABLE+newpid*16+10]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+10];
[PROCESS_TABLE+newpid*16+12]=0;
[PROCESS_TABLE+newpid*16+13]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
counter=RESOURCE_TABLE_OFFSET;
while(counter<512) do
	[[PROCESS_TABLE+newpid*16+11]*512+counter]=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+counter];
	[[PROCESS_TABLE+newpid*16+11]*512+counter+1]=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+counter+1];
	if([[PROCESS_TABLE+newpid*16+11]*512+counter]==1) then
		alias semaphore_table_index R2;
		semaphore_table_index=[[PROCESS_TABLE+newpid*16+11]*512+counter+1];
		[SEMAPHORE_TABLE+semaphore_table_index*4+1]=[SEMAPHORE_TABLE+semaphore_table_index*4+1]+1;
	endif;
	counter=counter+2;
endwhile;
counter=0;
while(counter<10) do
	[DISK_MAP_TABLE+newpid*10+counter]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+counter];
	counter=counter+1;
endwhile;
counter=0;
while(counter<16) do
	[PAGE_TABLE_BASE+newpid*20+counter]=[PTBR+counter];
	[PAGE_TABLE_BASE+newpid*20+counter+1]=[PTBR+counter+1];
	if([PAGE_TABLE_BASE+newpid*20+counter]!=-1) then
		[MEMORY_FREE_LIST+[PTBR+counter]]=[MEMORY_FREE_LIST+[PTBR+counter]]+1;
	endif;
	counter=counter+2;
endwhile;
counter=0;
alias oldstack R2;
alias newstack R3;
oldstack=[PTBR+16];
newstack=[PAGE_TABLE_BASE+newpid*20+16];
while(counter<512) do
	[newstack*512+counter]=[oldstack*512+counter];
	counter=counter+1;
endwhile;
counter=0;
oldstack=[PTBR+18];
newstack=[PAGE_TABLE_BASE+newpid*20+18];
while(counter<512) do
	[newstack*512+counter]=[oldstack*512+counter];
	counter=counter+1;
endwhile;
[[PROCESS_TABLE+newpid*16+11]*512]=BP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
[[PAGE_TABLE_BASE+newpid*20+2*((userSP-1)/512)]*512+(userSP-1)%512]=0;
[[PTBR+2*((userSP-1)/512)]*512+(userSP-1)%512]=newpid;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
ireturn;
