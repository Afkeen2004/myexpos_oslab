alias funcnum R1;
if(funcnum==1) then
	//incrementing wait_mem_count of systemstatustable
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
	//while no free memory page is available
	while([SYSTEM_STATUS_TABLE+2]==0) do
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
		multipush(R0,R1);
		call SCHEDULER;
		multipop(R0,R1);
	endwhile;
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
	alias counter R2;
	counter=0;
	while([MEMORY_FREE_LIST+counter]==1) do
		counter=counter+1;
	endwhile;
	R0=counter;
	[MEMORY_FREE_LIST+counter]=1;
	breakpoint;
	return;
endif;
if(funcnum==2) then
	alias pageno R2;
	[MEMORY_FREE_LIST+pageno]=[MEMORY_FREE_LIST+pageno]-1;
	if([MEMORY_FREE_LIST+pageno]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	endif;
	alias counter R3;
	counter=0;
	while(counter<16) do
		if([PROCESS_TABLE+counter*16+4]==WAIT_MEM) then
			[PROCESS_TABLE+counter*16+4]=READY;	
		endif;
		
		counter=counter+1;
	endwhile;
	breakpoint;
	return;
endif;
if(funcnum==4) then
	alias blocknum R2; 
	[DISK_FREE_LIST+blocknum]=[DISK_FREE_LIST+blocknum]-1;
	return;
endif;
if(funcnum==5) then
	alias blocknum R2;
	alias counter R3;
	counter=0;
	alias pagenum R5;
	pagenum=-1;
	while(counter<16) do
		alias j R4;
		j=4;
		while(j<8) do
			if([DISK_MAP_TABLE+counter*10+j]==blocknum) then
				break;
			endif;
			j=j+1;
		endwhile;
		if(j<8) then
			pagenum=[PTBR+counter*20+2*j];
			break;
		endif;
		counter=counter+1;
	endwhile;
	if(pagenum!=-1) then
		R0=pagenum;
		[MEMORY_FREE_LIST+pagenum]=[MEMORY_FREE_LIST+pagenum]+1;
		return;
	else
		multipush(R1,R2,R3,R4,R5);
		funcnum=1;
		call MEMORY_MANAGER;
		multipop(R1,R2,R3,R4,R5);
		multipush(R0,R1,R2,R3,R4,R5);
		R1=2;
		R4=blocknum;
		R3=R0;
		R2=[SYSTEM_STATUS_TABLE+1];
		breakpoint;
		call DEVICE_MANAGER;
		multipop(R0,R1,R2,R3,R4,R5);
		return;
	endif;
	
endif;
return;
